<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="my.dao.JobMapper">
  <resultMap id="BaseResultMap" type="my.entity.Job">
    <id column="job_id" jdbcType="BIGINT" property="jobId" />
    <result column="job_name" jdbcType="VARCHAR" property="jobName" />
    <result column="job_type" jdbcType="VARCHAR" property="jobType" />
    <result column="reference_panel_list" jdbcType="VARCHAR" property="referencePanelList" />
    <result column="array_build" jdbcType="VARCHAR" property="arrayBuild" />
    <result column="rsq_filter" jdbcType="DOUBLE" property="rsqFilter" />
    <result column="phasing" jdbcType="VARCHAR" property="phasing" />
    <result column="population" jdbcType="VARCHAR" property="population" />
    <result column="mode" jdbcType="VARCHAR" property="mode" />
    <result column="encryption" jdbcType="VARCHAR" property="encryption" />
    <result column="input_files_path" jdbcType="VARCHAR" property="inputFilesPath" />
    <result column="create_user_id" jdbcType="BIGINT" property="createUserId" />
  </resultMap>
  <sql id="Base_Column_List">
    job_id, job_name, job_type, reference_panel_list, array_build, rsq_filter, phasing, 
    population, mode, encryption, input_files_path, create_user_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from job
    where job_id = #{jobId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from job
    where job_id = #{jobId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="my.entity.Job">
    insert into job (job_id, job_name, job_type, 
      reference_panel_list, array_build, rsq_filter, 
      phasing, population, mode, 
      encryption, input_files_path, create_user_id
      )
    values (#{jobId,jdbcType=BIGINT}, #{jobName,jdbcType=VARCHAR}, #{jobType,jdbcType=VARCHAR}, 
      #{referencePanelList,jdbcType=VARCHAR}, #{arrayBuild,jdbcType=VARCHAR}, #{rsqFilter,jdbcType=DOUBLE}, 
      #{phasing,jdbcType=VARCHAR}, #{population,jdbcType=VARCHAR}, #{mode,jdbcType=VARCHAR}, 
      #{encryption,jdbcType=VARCHAR}, #{inputFilesPath,jdbcType=VARCHAR}, #{createUserId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="my.entity.Job">
    insert into job
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        job_id,
      </if>
      <if test="jobName != null">
        job_name,
      </if>
      <if test="jobType != null">
        job_type,
      </if>
      <if test="referencePanelList != null">
        reference_panel_list,
      </if>
      <if test="arrayBuild != null">
        array_build,
      </if>
      <if test="rsqFilter != null">
        rsq_filter,
      </if>
      <if test="phasing != null">
        phasing,
      </if>
      <if test="population != null">
        population,
      </if>
      <if test="mode != null">
        mode,
      </if>
      <if test="encryption != null">
        encryption,
      </if>
      <if test="inputFilesPath != null">
        input_files_path,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        #{jobId,jdbcType=BIGINT},
      </if>
      <if test="jobName != null">
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobType != null">
        #{jobType,jdbcType=VARCHAR},
      </if>
      <if test="referencePanelList != null">
        #{referencePanelList,jdbcType=VARCHAR},
      </if>
      <if test="arrayBuild != null">
        #{arrayBuild,jdbcType=VARCHAR},
      </if>
      <if test="rsqFilter != null">
        #{rsqFilter,jdbcType=DOUBLE},
      </if>
      <if test="phasing != null">
        #{phasing,jdbcType=VARCHAR},
      </if>
      <if test="population != null">
        #{population,jdbcType=VARCHAR},
      </if>
      <if test="mode != null">
        #{mode,jdbcType=VARCHAR},
      </if>
      <if test="encryption != null">
        #{encryption,jdbcType=VARCHAR},
      </if>
      <if test="inputFilesPath != null">
        #{inputFilesPath,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="my.entity.Job">
    update job
    <set>
      <if test="jobName != null">
        job_name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobType != null">
        job_type = #{jobType,jdbcType=VARCHAR},
      </if>
      <if test="referencePanelList != null">
        reference_panel_list = #{referencePanelList,jdbcType=VARCHAR},
      </if>
      <if test="arrayBuild != null">
        array_build = #{arrayBuild,jdbcType=VARCHAR},
      </if>
      <if test="rsqFilter != null">
        rsq_filter = #{rsqFilter,jdbcType=DOUBLE},
      </if>
      <if test="phasing != null">
        phasing = #{phasing,jdbcType=VARCHAR},
      </if>
      <if test="population != null">
        population = #{population,jdbcType=VARCHAR},
      </if>
      <if test="mode != null">
        mode = #{mode,jdbcType=VARCHAR},
      </if>
      <if test="encryption != null">
        encryption = #{encryption,jdbcType=VARCHAR},
      </if>
      <if test="inputFilesPath != null">
        input_files_path = #{inputFilesPath,jdbcType=VARCHAR},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=BIGINT},
      </if>
    </set>
    where job_id = #{jobId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="my.entity.Job">
    update job
    set job_name = #{jobName,jdbcType=VARCHAR},
      job_type = #{jobType,jdbcType=VARCHAR},
      reference_panel_list = #{referencePanelList,jdbcType=VARCHAR},
      array_build = #{arrayBuild,jdbcType=VARCHAR},
      rsq_filter = #{rsqFilter,jdbcType=DOUBLE},
      phasing = #{phasing,jdbcType=VARCHAR},
      population = #{population,jdbcType=VARCHAR},
      mode = #{mode,jdbcType=VARCHAR},
      encryption = #{encryption,jdbcType=VARCHAR},
      input_files_path = #{inputFilesPath,jdbcType=VARCHAR},
      create_user_id = #{createUserId,jdbcType=BIGINT}
    where job_id = #{jobId,jdbcType=BIGINT}
  </update>
</mapper>